{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\Stink\\\\Documents\\\\GitHub\\\\OneMoreSale\\\\frontend\\\\src\\\\chat\\\\RoomList.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { Link, useHistory } from \"react-router-dom\";\nimport { Jumbotron, Spinner, ListGroup, ListGroupItem, Button } from 'reactstrap';\nimport Moment from 'moment';\nimport firebase from './Firebase';\n\nfunction RoomList() {\n  _s();\n\n  const [room, setRoom] = useState([]);\n  const [showLoading, setShowLoading] = useState(true);\n  const [nickname, setNickname] = useState('');\n  const history = useHistory();\n  useEffect(() => {\n    const fetchData = async () => {\n      setNickname(localStorage.getItem('nickname'));\n      firebase.database().ref('users/').orderByChild('nickname').equalTo(nickname).once('value', snapshot => {\n        if (!snapshot.exists()) {\n          const newUser = firebase.database().ref('users/').push();\n          newUser.set({\n            nickname: nickname\n          });\n          setShowLoading(false);\n        }\n      });\n      firebase.database().ref('rooms/').on('value', resp => {\n        setRoom([]);\n        setRoom(snapshotToArray(resp));\n        setShowLoading(false);\n      });\n    };\n\n    fetchData();\n  }, []);\n\n  const snapshotToArray = snapshot => {\n    const returnArr = [];\n    snapshot.forEach(childSnapshot => {\n      const item = childSnapshot.val();\n      item.key = childSnapshot.key;\n      returnArr.push(item);\n    });\n    return returnArr;\n  };\n\n  const enterChatRoom = roomname => {\n    const chat = {\n      roomname: '',\n      nickname: '',\n      message: '',\n      date: '',\n      type: ''\n    };\n    chat.roomname = roomname;\n    chat.nickname = nickname;\n    chat.date = Moment(new Date()).format('DD/MM/YYYY HH:mm:ss');\n    chat.message = `${nickname} enter the room`;\n    chat.type = 'join';\n    const newMessage = firebase.database().ref('chats/').push();\n    newMessage.set(chat);\n    firebase.database().ref('roomusers/').orderByChild('roomname').equalTo(roomname).on('value', resp => {\n      let roomuser = [];\n      roomuser = snapshotToArray(resp);\n      const user = roomuser.find(x => x.nickname === nickname);\n\n      if (user !== undefined) {\n        const userRef = firebase.database().ref('roomusers/' + user.key);\n        userRef.update({\n          status: 'online'\n        });\n      } else {\n        const newroomuser = {\n          roomname: '',\n          nickname: '',\n          status: ''\n        };\n        newroomuser.roomname = roomname;\n        newroomuser.nickname = nickname;\n        newroomuser.status = 'online';\n        const newRoomUser = firebase.database().ref('roomusers/').push();\n        newRoomUser.set(newroomuser);\n      }\n    });\n    history.push('/chatroom/' + roomname);\n  };\n\n  const logout = () => {\n    localStorage.removeItem('nickname');\n    history.push('/login');\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [showLoading && /*#__PURE__*/_jsxDEV(Spinner, {\n      color: \"primary\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(Jumbotron, {\n      children: /*#__PURE__*/_jsxDEV(ListGroup, {\n        children: room.map((item, idx) => /*#__PURE__*/_jsxDEV(ListGroupItem, {\n          action: true,\n          onClick: () => {\n            enterChatRoom(item.roomname);\n          },\n          children: item.roomname\n        }, idx, false, {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 25\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 90,\n    columnNumber: 9\n  }, this);\n}\n\n_s(RoomList, \"1ePfafC0Qr5LvImlcm93K+JDuYI=\", false, function () {\n  return [useHistory];\n});\n\n_c = RoomList;\nexport default RoomList;\n\nvar _c;\n\n$RefreshReg$(_c, \"RoomList\");","map":{"version":3,"sources":["C:/Users/Stink/Documents/GitHub/OneMoreSale/frontend/src/chat/RoomList.js"],"names":["React","useState","useEffect","Link","useHistory","Jumbotron","Spinner","ListGroup","ListGroupItem","Button","Moment","firebase","RoomList","room","setRoom","showLoading","setShowLoading","nickname","setNickname","history","fetchData","localStorage","getItem","database","ref","orderByChild","equalTo","once","snapshot","exists","newUser","push","set","on","resp","snapshotToArray","returnArr","forEach","childSnapshot","item","val","key","enterChatRoom","roomname","chat","message","date","type","Date","format","newMessage","roomuser","user","find","x","undefined","userRef","update","status","newroomuser","newRoomUser","logout","removeItem","map","idx"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport {\r\n    Link,\r\n    useHistory\r\n  } from \"react-router-dom\";\r\nimport {\r\n    Jumbotron,\r\n    Spinner,\r\n    ListGroup,\r\n    ListGroupItem,\r\n    Button\r\n} from 'reactstrap';\r\nimport Moment from 'moment';\r\nimport firebase from './Firebase';\r\n\r\nfunction RoomList() {\r\n    const [room, setRoom] = useState([]);\r\n    const [showLoading, setShowLoading] = useState(true);\r\n    const [nickname, setNickname] = useState('');\r\n    const history = useHistory();\r\n\r\n    useEffect(() => {\r\n        const fetchData = async () => {\r\n            setNickname(localStorage.getItem('nickname'));\r\n            firebase.database().ref('users/').orderByChild('nickname').equalTo(nickname).once('value', snapshot => {\r\n                if (!snapshot.exists()) {\r\n                    const newUser = firebase.database().ref('users/').push();\r\n                    newUser.set({ nickname: nickname});\r\n                    setShowLoading(false);\r\n                }\r\n            });\r\n            firebase.database().ref('rooms/').on('value', resp => {\r\n                setRoom([]);\r\n                setRoom(snapshotToArray(resp));\r\n                setShowLoading(false);\r\n            });\r\n        };\r\n      \r\n        fetchData();\r\n    }, []);\r\n\r\n    const snapshotToArray = (snapshot) => {\r\n        const returnArr = [];\r\n\r\n        snapshot.forEach((childSnapshot) => {\r\n            const item = childSnapshot.val();\r\n            item.key = childSnapshot.key;\r\n            returnArr.push(item);\r\n        });\r\n\r\n        return returnArr;\r\n    }\r\n\r\n    const enterChatRoom = (roomname) => {\r\n        const chat = { roomname: '', nickname: '', message: '', date: '', type: '' };\r\n        chat.roomname = roomname;\r\n        chat.nickname = nickname;\r\n        chat.date = Moment(new Date()).format('DD/MM/YYYY HH:mm:ss');\r\n        chat.message = `${nickname} enter the room`;\r\n        chat.type = 'join';\r\n        const newMessage = firebase.database().ref('chats/').push();\r\n        newMessage.set(chat);\r\n\r\n        firebase.database().ref('roomusers/').orderByChild('roomname').equalTo(roomname).on('value', (resp) => {\r\n            let roomuser = [];\r\n            roomuser = snapshotToArray(resp);\r\n            const user = roomuser.find(x => x.nickname === nickname);\r\n            if (user !== undefined) {\r\n              const userRef = firebase.database().ref('roomusers/' + user.key);\r\n              userRef.update({status: 'online'});\r\n            } else {\r\n              const newroomuser = { roomname: '', nickname: '', status: '' };\r\n              newroomuser.roomname = roomname;\r\n              newroomuser.nickname = nickname;\r\n              newroomuser.status = 'online';\r\n              const newRoomUser = firebase.database().ref('roomusers/').push();\r\n              newRoomUser.set(newroomuser);\r\n            }\r\n        });\r\n    \r\n        history.push('/chatroom/' + roomname);\r\n    }\r\n\r\n    const logout = () => {\r\n        localStorage.removeItem('nickname');\r\n        history.push('/login');\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            {showLoading &&\r\n                <Spinner color=\"primary\" />\r\n            }\r\n            <Jumbotron>\r\n                <ListGroup>\r\n                    {room.map((item, idx) => (\r\n                        <ListGroupItem key={idx} action onClick={() => { enterChatRoom(item.roomname) }}>{item.roomname}</ListGroupItem>\r\n                    ))}\r\n                </ListGroup>\r\n            </Jumbotron>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default RoomList;"]},"metadata":{},"sourceType":"module"}